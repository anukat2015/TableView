<project name="TableView" default="exe" basedir=".">
    <target name="help" depends="init" description="Print out target information.">
        <echo>
            targets:        action:
              help            print this target list
              init            initializes the property values
                              These can also be set in: ${user.home}/.${name}.properties
              compile         compiles the jave source
              jar             builds the jar of the compiled source
              dist            assembles all files for distribution
              clean           cleans up the build and dist directories
        </echo>
    </target>
  
    <target name="init" depends="compiler-def-args" description="Initializes the property values.">
        <tstamp />
        <!-- First get the user specified properties -->
        <property name="name" value="TableView" />
        <property file="${user.home}/.${name}.properties" />

        <property name="version" value="1.3.1" />

        <property name="build.compiler" value="modern" />

        <!-- Save the current system classpath to pass to forked VMs -->
        <property name="env.classpath" value="${java.class.path}" />

        <!-- Find all the library jars that should be in the classpath -->
        <path id="lib.path">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <!-- Set the classpath -->
        <property name="classpath" refid="lib.path"/> 
        <!--
        <echo>
           classpath = ${classpath}
        </echo>
        -->

        <tstamp>
            <format property="build.year"   pattern="yyyy" />
            <format property="build.month"  pattern="MM" />
            <format property="build.date"   pattern="dd" />
            <format property="build.hour"   pattern="hh" />
            <format property="build.minute" pattern="mm" />
        </tstamp>
        
        <!-- Check the current system classpath for JUnit -->
        <available classpath="${classpath}"
               classname="junit.framework.TestCase"
               property="junit.present" />

        <!-- Check the current system classpath for JUnit support in Ant (only in >= 1.3) -->
        <available classpath="${classpath}"
               classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTest"
               property="junit.support" />

        <!-- Check the current system classpath for Java3D -->
        <available classpath="${classpath}"
               classname="javax.media.j3d.Canvas3D"
               property="java3d.present" />

        <!-- Check the current system classpath for the UMN cluto package -->
        <available classpath="${classpath}"
               classname="jcluto.ClutoMatrix"
               property="cluto.present" />

        <!-- Check the current system classpath for the rhino javascript package -->
        <available classpath="${classpath}"
               classname="org.mozilla.javascript.Context"
               property="rhino.present" />

        <!-- Check the current system classpath for the Beanshell package -->
        <available classpath="${classpath}"
               classname="bsh.Interpreter"
               property="beanshell.present" />

        <!-- Check the current system classpath for the CERN colt package -->
        <available classpath="${classpath}"
               classname="cern.colt.matrix.DoubleMatrix2D"
               property="colt.present" />

        <!-- Check the current system classpath for the Lowagie iText package -->
        <available classpath="${classpath}"
               classname="com.lowagie.text.pdf.PdfWriter"
               property="iText.present" />


        <!-- source locations -->
        <property name="readme" value="README" />
        <property name="license" value="LICENSE" />
        <property name="src.dir" value="src" />
        <property name="websrc.dir" value="www" />
        <property name="lib.dir" value="lib" />
        <property name="documentation.dir" value="doc" />
        <property name="rsrc.dir" value="resources" />
        
        <!--Do I need it -->
        <property name="manifest.dir" value="manifest" />
        <property name="manifest.file" value="defaultmanifest.txt" />
        <property name="resources.dir" value="resources" />

        <property name="packages" value="edu.*,jcluto.*" />

        <!-- build locations -->
        <property name="build.xml" value="build.xml" />
        <property name="build.dir" value="build" />
        <!-- Subdirectories for main source and classes -->
        <property name="build.src.main" value="${build.dir}/src/main" />
        <property name="build.dest.main" value="${build.dir}/classes/main" />
        <property name="build.lib" value="${build.dir}/lib" />
        <property name="web.dir" value="${build.dir}/war" />

        <!-- Subdirectory for Javadocs -->
        <property name="build.javadocs" value="${build.dir}/doc" />

        <property name="dist.root" value="dist" />
        <property name="dist.dir" value="${dist.root}/${name}-${version}" />
        <property name="webstart.dir" value="${dist.root}/webstart" />
        <!-- JNLP Webstart -->
        <property name="jnlp.file.path" value="etc/TableView.jnlp" />
        <property name="jnlp.version"   value="${version}" />
        <property name="jnlp.codebase"  value="http://USE_YOUR_URL_HERE" />
        <property name="jnlp.icon.name" value="TableView.png" />
        <property name="jnlp.icon.path" value="resources/${jnlp.icon.name}" />
                
        <!-- jar signing properties, user should put in real values here, or in user's properties file -->
        <property name="sign.dname.commonName" value="${user.name}"/>
        <property name="sign.dname.organizationUnit" value="${user.name}"/>
        <property name="sign.dname.organizationName"  value="${user.name}"/>
        <property name="sign.dname.country"  value="PlanetEarth"/>
        <property name="sign.keystore" value="${user.home}/.keystore" />
        <property name="sign.storepass" value="changeit" />
        <property name="sign.keypass" value="igb" />
        <property name="sign.alias" value="igb" />
        <property name="sign.aliaspass" value="${sign.storepass}" />
        <property name="sign.signedjar" value="${name}.jar" />
        <property name="project.war" value="${name}.war" />
        <available file="${sign.keystore}" property="sign.keystore.present"/>
        
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${lib.dir}/ant-contrib-1.0b3/ant-contrib.jar"/>
            </classpath>
        </taskdef>
               
        <math result="b1">  
            <op op="add">
                <op op="multiply"> <num value="${build.year}"/>  <num value="10"/>  </op>
                <op op="multiply"> <num value="${build.month}"/> <num value="100"/> </op>
                <op op="multiply"> <num value="${build.date}"/>  <num value="10"/>  </op>
                <op op="multiply"> <num value="${build.hour}"/>  <num value="5"/>   </op>
                <num value="${build.minute}"/>
            </op>
        </math>
        <math result="build.time" operand1="${b1}"  operation="+" operand2="0"   datatype="int" />
        <echo>
            <!--
             sign.keystore.present = ${sign.keystore.present}
             sign.dname.commonName = ${sign.dname.commonName}
             sign.dname.organizationUnit = ${sign.dname.organizationUnit}
             sign.dname.organizationName = ${sign.dname.organizationName}
             sign.dname.country = ${sign.dname.country}
             sign.keystore   = ${sign.keystore}
             sign.storepass  = ${sign.storepass}
             sign.keypass    = ${sign.keypass}
             sign.alias      = ${sign.alias}
             sign.signedjar  = ${sign.signedjar}
            -->
        </echo>

        <!-- Filters -->
	<filter token="jnlp.version"  value="${jnlp.version}" />
	<filter token="jnlp.codebase" value="${jnlp.codebase}" />
	<filter token="jnlp.icon.name" value="${jnlp.icon.name}" />
        <filter token="build.time"   value="${build.time}" />
        
        <!-- The MAIN-CLASS for the application jar. -->
        <property name="main.class" value="org.tigr.midas.display.Midas" />
    </target>
    
    <target name="compiler-def-args">
        <!-- compiler defaults passed to javac -->
	<property name="debug"         value="true" />
	<property name="deprecation"   value="true"/>
	<property name="compiler.args" value="-Xlint:-unchecked"/>
    </target>
        
    <presetdef name="my.javac">
        <javac srcdir="${src.dir}" classpath="${classpath}" debug="${debug}" 
               deprecation="${deprecation}" includeantruntime="false">
		<compilerarg compiler="modern" line="${compiler.args}"/>
    	</javac>
    </presetdef>
    
    <presetdef name="my.signjar">
	<signjar alias="${sign.alias}" storepass="${sign.storepass}" keystore="${sign.keystore}" keypass="${sign.aliaspass}" />
    </presetdef>
    
    <target name="tableview-classpath" depends="init" description="Sets classpath variable">
        <path id="tv.classpath">
            <dirset dir="${build.dir}" />
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>
    </target>
    
    <target name="compile" depends="tableview-classpath" description="Compiles java classes.">
        <mkdir dir="${build.dir}" />
        <my.javac srcdir="${src.dir}" 
                  destdir="${build.dir}" 
                  classpath="${classpath}" />
        <copy todir="${build.dir}" >
            <fileset dir="${rsrc.dir}"/>
	</copy>
    </target>
    
    <target name="jar" depends="compile" description="Create jar">
        <mkdir dir="${dist.root}" />
        <jar jarfile="${dist.root}/${name}.jar" update="false">
            <fileset dir="${build.dir}" />
	</jar>
    </target>
    
    <target name="profile-nb" if="netbeans.home">
	<ant target="profile-nb" antfile="nbproject/ide-targets.xml" />
    </target>
    
    <target name="run" depends="compile" description="run TableView">
        <java fork="true" maxmemory="1024m" 
              classname="edu.umn.genomics.table.TableView">
              <classpath refid="tv.classpath"/>
            <sysproperty key="apple.laf.useScreenMenuBar" value="true" />
        </java>
    </target>
    
    <target name="dist" depends="compile" description="Create distributable jars">
        <mkdir dir="${dist.dir}" />
        <jar jarfile="${dist.dir}/${name}.jar" update="false" manifest="./META-INF/MANIFEST.MF">
            <fileset dir="${build.dir}" />
            <zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
	</jar>
    </target>
    
    <target name="webstart" depends="dist" description="Create distributable jars">
        <mkdir dir="${webstart.dir}"/>
	<my.signjar jar="${dist.dir}/${name}.jar" signedjar="${dist.root}/webstart/${name}.jar"/>
        <copy file="${jnlp.file.path}" tofile="${webstart.dir}/TableView.jnlp" filtering="true" overwrite="true" />
	<copy file="${jnlp.icon.path}" tofile="${webstart.dir}/${jnlp.icon.name}" />
    </target>
    
    <target name="clean" depends="init" description="Delete compiled data">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir}" />
            <fileset dir="${dist.root}" />
            <fileset file="${name}.jar" />
        </delete>
    </target>
        
</project>
